name: Spring CI

on:
  pull_request:
    branches: [ develop ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'
      #서브모듈 업데이트
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.TOKEN }}
          fetch-depth: 0
      # Fetch master branch
      # Attempt to merge with master
      - name: Try to Merge with Master
        id: merge
        run: |
          git checkout -b master-merge-test origin/master
          git merge --no-ff --no-commit ${{ github.event.pull_request.head.ref }} || echo "::set-output name=status::failure"

      # Check if there was a merge conflict
      - name: Check Merge Conflict
        if: steps.merge.outputs.status == 'failure'
        run: exit 1t ${{ github.event.pull_request.head.ref }} || echo "::error::Merge Conflict with master"

      # Check if there was a merge conflict
      - name: Check Merge Conflict
        if: steps.merge.outcome == 'failure'
        run: exit 1


      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run gradlew command
        run: ./gradlew drrr-batch:copyGitSubmodule

      ## docker compose up (docker-compose 기반)
      - name: Build and run Docker Compose
        run: |
          docker-compose up -d
          docker image prune -f


      - name: Build with Gradle
        run: ./gradlew clean build --parallel


      - name: Deploy Prod use SCP
        uses: appleboy/scp-action@master
        with:
          username: ${{secrets.BATCH_SSH_USER}}
          host: ${{ secrets.BATCH_HOST }}
          key: ${{ secrets.BATCH_SSH_KEY }}
          source: "./drrr-batch/build/libs/*.jar,./drrr-summarizer/build/libs/*.jar"
          target: ${{secrets.BATCH_SSH_TARGET_URL}}
          strip_components: 3

      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: project-artifacts
          path: |
            drrr-api/build/libs/*.jar

      #Docker의 Buildx는 Docker의 CLI 플러그인으로, Docker 이미지를 빌드하는데 사용
      - name: Setup docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      # Docker 레이어를 캐시하는 작업
      - name: Cache docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ env.VERSION }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      #jar 파일 생성 후 docker hub에 푸시(Dockerfile 기반)
      - name: Build and push Docker image
        env:
          TOKEN: ${{ secrets.DOCKER_TOKEN }}
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_DEV }} .
          docker login -u ${{ secrets.DOCKER_HUB_YYK_LOGIN }} -p $TOKEN
          docker push ${{ secrets.DOCKER_HUB_DEV }}
