name: Master branch workflow
on:
  push:
    branches:
      - master  # master 브랜치에 push가 발생하면 워크플로우 실행

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'
      #서브모듈 업데이트
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.TOKEN }}
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run gradlew command
        run: ./gradlew drrr-batch:copyGitSubmodule

      ## docker compose up (docker-compose 기반)
      - name: Build and run Docker Compose
        run: |
          docker-compose up -d
          docker image prune -f

      - name: Build with Gradle
        run: ./gradlew clean build --parallel

      - name: Deploy Prod use SCP
        uses: appleboy/scp-action@master
        with:
          username: ${{secrets.BATCH_SSH_USER}}
          host: ${{ secrets.BATCH_HOST }}
          key: ${{ secrets.BATCH_SSH_KEY }}
          source: "./drrr-batch/build/libs/*.jar,./drrr-summarizer/build/libs/*.jar"
          target: ${{secrets.BATCH_SSH_TARGET_URL}}
          strip_components: 3


      # 운영 환경 application.yml 적용
      - name: Move files
        run: |
          cp drrr-api/src/main/resources/security-storage-api/config/* drrr-api/src/main/resources/

      - name: Build with Gradle
        run: ./gradlew clean build


      #Docker의 Buildx는 Docker의 CLI 플러그인으로, Docker 이미지를 빌드하는데 사용
      - name: Setup docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      # Docker 레이어를 캐시하는 작업
      - name: Cache docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ env.VERSION }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      #jar 파일 생성 후 docker hub에 푸시(Dockerfile 기반)
      - name: Build and push Docker image
        env:
          TOKEN: ${{ secrets.DOCKER_TOKEN }}
        run: |
          docker build -t youngkyonyou/drrr-master:latest .
          docker login -u youngyou1324@naver.com -p $TOKEN
          docker push youngkyonyou/drrr-master:latest

  deploy:
    needs: build
    name: Deploy
    runs-on: [ self-hosted, drrr-label ]
    # label-superman 라는 이름으로 AWS EC2 가 Runner 를 작동시킬 때 사용했던 그 label
    steps:
      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}
      - name: Docker run
        # ${{ env.NAME}} - drrr-runner
        run: |
          docker stop ${{ secrets.BACKEND_SERVER_CONTAINER_NAME }} && docker rm ${{ secrets.BACKEND_SERVER_CONTAINER_NAME }} && docker rmi -f ${{ secrets.DOCKER_HUB_MASTER_WITHOUT_TAG }}
          cd /home/ec2-user/drrr-app && docker-compose down && docker rmi -f youngkyonyou/drrr-master && docker-compose up -d